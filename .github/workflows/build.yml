name: Build and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: aszeszo/ms-mqtt-adapter

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        #arch: [amd64, aarch64, armhf, armv7, i386]
        arch: [amd64, aarch64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from ha-addon config
        id: version
        run: |
          VERSION=$(grep '^version:' ha-addon/config.yaml | sed 's/version: *"\([^"]*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set platform mapping
        id: platform
        run: |
          case ${{ matrix.arch }} in
            amd64) echo "platform=linux/amd64" >> $GITHUB_OUTPUT ;;
            aarch64) echo "platform=linux/arm64" >> $GITHUB_OUTPUT ;;
            armv7) echo "platform=linux/arm/v7" >> $GITHUB_OUTPUT ;;
            armhf) echo "platform=linux/arm/v6" >> $GITHUB_OUTPUT ;;
            i386) echo "platform=linux/386" >> $GITHUB_OUTPUT ;;
          esac

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ steps.platform.outputs.platform }}
          push: true
          provenance: false
          sbom: false
          build-args: |
            BUILD_FROM=ghcr.io/home-assistant/${{ matrix.arch }}-base:latest
            VERSION=${{ steps.version.outputs.version }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-${{ matrix.arch }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.arch }}
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}

  manifest:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from ha-addon config
        id: version
        run: |
          VERSION=$(grep '^version:' ha-addon/config.yaml | sed 's/version: *"\([^"]*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest for version tag
        run: |
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-aarch64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-armhf \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-armv7 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-i386
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}

      - name: Create and push manifest for latest tag
        run: |
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-aarch64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-armhf \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-armv7 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-i386
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest